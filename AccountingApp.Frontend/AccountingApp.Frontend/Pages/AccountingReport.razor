@using System.Linq;

@inherits DataAccessComponent

@inject IBudgetReportsService Service

@page "/report"

<MudContainer MaxWidth="@MaxContentWidth">
    <MudButton Color="@Color.Primary" OnClick="@SwitchReportTimeSpan">
        @ReportTimeSpan
    </MudButton>

    <MudButton Color="@Color.Primary" OnClick="@SwitchReportType">
        @ReportType
    </MudButton>
</MudContainer>

@if (!ShowReport)
{
    <MudContainer Class="d-flex justify-center" MaxWidth="@MaxContentWidth">
        <MudText Class="my-3" Typo="Typo.h5">
            There is no data
        </MudText>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="@MaxContentWidth" Class="main-grid mt-2" >
        <MudGrid Class="align-content-center">
            <MudItem Class="d-flex-column align-center" xs="12" md="5">
                <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                    <MudCard Class="mb-4 " Style="overflow:hidden" Elevation="@ElevationLevel">
                        <MudCardContent>
                            <MudText Align="Align.Center" Typo="Typo.h5">
                                Total $@(TotalText)
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudContainer>
                <MudChart Class="justify-center" ChartType="@ChartType.Pie"
                          Width="50%"
                          InputData="@ChartData" @bind-SelectedIndex="@SelectedChartItemIndex"
                          InputLabels="@ChartLabels" >
                </MudChart>
            </MudItem>
            <MudItem Class="align-center" xs="12" md="7">
                <MudContainer MaxWidth="MaxWidth.Large">
                    <MudPaper Elevation="@ElevationLevel">
                        <MudTable Items="@Reports" Breakpoint="Breakpoint.None" Style="align-items:baseline">
                            <ColGroup>
                                <col style="width: 50%" />
                                <col style="width: 50%" />
                            </ColGroup>
                            <HeaderContent>
                                <MudTh>Category</MudTh>
                                <MudTh>Amount $</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.BudgetTypeName</MudTd>
                                <MudTd>@context.AmountInDollars.ToString("F")</MudTd>
                            </RowTemplate>
                            <FooterContent>
                            </FooterContent>
                        </MudTable>
                    </MudPaper>
                </MudContainer>
            </MudItem>
        </MudGrid>
    </MudContainer>
}


@code {

    private const MaxWidth MaxContentWidth = MaxWidth.False;

    private const int ElevationLevel = 1;
    private const string Untyped = "UNCATEGORIZED";

    private bool ShowReport
        => Reports is not null && Reports.Any();

    private IEnumerable<BudgetReport> Reports { get; set; }

    private double[] ChartData => Reports?.Select(r => r.AmountInDollars).ToArray();
    private string[] ChartLabels => Reports?.Select(r => r.BudgetTypeName).ToArray();
    private string TotalText => Reports?.Sum(r => r.AmountInDollars).ToString("F");
    private int SelectedChartItemIndex = -1;

    private BudgetReportTimeSpan ReportTimeSpan { get; set; } = BudgetReportTimeSpan.Day;
    private BudgetReportType ReportType { get; set; } = BudgetReportType.Income;

    protected override async Task OnInitializedAsync()
    {
        if (!(await Account.TrySetAccessToken(Service)))
        {
            NavigationManager.NavigateToAuthentification();
            return;
        }

        await InitializeViewData();
    }

    private async Task InitializeViewData()
    {
        var (reports, result) = await Service.GetReport(ReportType, ReportTimeSpan);
        await ProcessResult(result);
        Reports = reports;
    }

    private async Task SwitchReportTimeSpan()
    {
        ReportTimeSpan = ReportTimeSpan switch
        {
            BudgetReportTimeSpan.Day => BudgetReportTimeSpan.Month,
            BudgetReportTimeSpan.Month => BudgetReportTimeSpan.Day,
            _ => BudgetReportTimeSpan.Day
        };
        await InitializeViewData();
    }

    private async Task SwitchReportType()
    {
        ReportType = ReportType switch
        {
            BudgetReportType.Income => BudgetReportType.Expense,
            BudgetReportType.Expense => BudgetReportType.Income,
            _ => BudgetReportType.Income
        };
        await InitializeViewData();
    }
}
