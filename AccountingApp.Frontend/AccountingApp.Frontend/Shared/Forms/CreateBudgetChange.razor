@using AccountingApp.Frontend.Shared.Forms.Fields;
@using AccountingApp.Frontend.Shared.Forms.Abstract;

@inherits CreateBudgetModelBase<BudgetChange>

<FormDialog Header="Add new income/expense">
    <Form>
        <MudForm @ref="@_form" Model="@Model" @bind-IsValid="@IsValidationSuccessful">
            <TypeSelectField @bind-BudgetChange="Model" BudgetTypes="BudgetTypes" />
            <AmountField @bind-BudgetChange="@Model" />
            <DatePicker @bind-Date="@Model.Date"/>
        </MudForm>
    </Form>
    <Buttons>
        <MudButton Variant="Variant.Text" Color="Color.Primary" Class="ml-2"
                   OnClick="@HandleUserSubmit" Disabled="@(!IsValidationSuccessful)">
            Create
        </MudButton>
    </Buttons>
</FormDialog>

@code {

    public IEnumerable<BudgetType> BudgetTypes { get; set; }


    [Parameter]
    public IBudgetTypesService BudgetTypesService
    {
        get { return _budgetTypeService ?? throw new ArgumentNullException(); }
        set { _budgetTypeService = value; }
    }

    private IBudgetTypesService _budgetTypeService;
    private MudForm _form;

    protected override async Task OnInitializedAsync()
    {
        Model.Date = DateTime.Now;
        BudgetTypes = await GetTypes();
    }

    private async Task<IEnumerable<BudgetType>> GetTypes()
    {
        var (budgetTypes, result) = await BudgetTypesService.GetAll();
        await ProcessResult(result, "The category information is not retreived");
        return budgetTypes;
    }

    protected override async Task HandleUserSubmit()
    {
        _form.Validate();
        if (!IsValidationSuccessful)
        {
            return;
        }
        await base.HandleUserSubmit();
    }
}
